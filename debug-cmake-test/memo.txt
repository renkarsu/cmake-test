参考リンク
https://qiita.com/yut-nagase/items/ced10f952b74f115c733

大事なのは
・launch.json
・tasks.json
・CMakeLists.json
の三つ

・launch.jsonは普通にデバッグするときと同じ設定にしたファイルを用意し、
そこから"program"タグのパスを変更して、buildの中に実行ファイルがあることを
プログラムに伝える必要がある。
launch.jsonはデバッグ実行をする際の設定ファイル

・tasks.jsonは"command"タグに"powershell"を指定し、argsがコマンドを実行できるようにする。
"command"タグが"shell"だと、上手くいかなかった。原因は予想できるが、伏せる(ホームズ)
　以下はよくある"command"タグの使い方である. gcc.exeコマンドを実行し、その引数(コンパイラオプション)
を指定している。
例("command"タグのC:\\...\\gcc.exeはパスを通しているなら当然gccだけでいい(未検証))
"command": "C:\\msys64\\mingw64\\bin\\gcc.exe",
"args": [
  "-g",
  "${file}",
  "${fileDirname}\\mtrand.c",
  "${fileDirname}\\kfcomp2013.c",
  "-o",
  "${fileDirname}\\${fileBasenameNoExtension}.exe"
],

・CMakeLists.jsonは普通に書けばよいが、launch.jsonで
```
"program": "${fileDirname}\\build\\${fileBasenameNoExtension}.exe",
```
のようにしているので、実行ファイル名は気を付ける必要がある。まず、上記タグの説明の後、実行ファイル名について解説する。
上記"program"タグでは、main.cppのような実行するファイルのディレクトリネームまでの絶対パスが示され、次にbuildフォルダ
に移動する。そして、buildフォルダ内で、main.cppのような実行するファイルの拡張子を除くmainという名前の後に、.exeを指定し
main.exeというファイルをbuildファイル内に保存することを示している。

実行ファイル名はmain(実行したいファイルの拡張子抜きの名前)なので、CMakelists.jsonでは
```
# mainという実行ファイルをmain.cppから作成
add_executable(main main.cpp)
```
以下のように指定する必要がある。
補足として、コンパイラオプションは理解していれば当然な話だが、CMakeLists.jsonに記載する。task.jsonではない。
なぜなら、task.jsonの"command"タグで指定しているコマンドが異なるからである。
つまり、cmakeを使う場合と使わない場合でtask.jsonの"command"タグの内容が変化していることに注意してほしいということ。